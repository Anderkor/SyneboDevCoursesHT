@RestResource(urlMapping='/Animals/*')
global without sharing class AnimalManager{
    @HttpGet
    global static Animal__c getAnimalById(){
        RestRequest request = RestContext.request;
        Integer animalId = Integer.valueOf(request.requestURI.substring(
        	request.requestURI.lastIndexOf('/')+1));
        Animal__c result = [SELECT Heroku_Id__c,Description__C,Eats__c,Says__c
                             FROM Animal__c
                             WHERE Heroku_Id__c = :animalId LIMIT 1];
        return result;
    }
    
    @HttpPost
    global static void animalUpdatePost() {
        String reqBody = RestContext.request.requestBody.toString();
        RestRequest request = RestContext.request;
        try {
            if(String.isNotBlank(reqBody)) {
            Integer animalId = Integer.valueOf(request.requestURI.substring(
                request.requestURI.lastIndexOf('/')+1));
            Animal__c animal = [SELECT Heroku_Id__c,Description__c,Eats__c,Says__c
                                    FROM Animal__c
                                    WHERE Heroku_Id__c = :animalId LIMIT 1];
            
            Map<String, AnimalModel> resultedAnimalMap = (Map<String, AnimalModel>)JSON.deserialize(request.requestBody.tostring(),Map<String, AnimalModel>.class);
            AnimalModel animalItem = resultedAnimalMap.get('animal');
            animal.Description__c = animalItem.name;
            animal.Eats__c = animalItem.eats;
            animal.Says__c = animalItem.says;

            update animal;
            } else {
                throw new CalloutException();
            }
            RestContext.response.statusCode = 200;
        } catch (CalloutException e) {
            RestContext.response.statusCode = 400;
        } catch (Exception e) {
            RestContext.response.statusCode = 500;
        }
    }
}
